"""
Django settings for videoq project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")
# Fallback for CI/test environment
if os.environ.get("DJANGO_TEST", "") == "1" and not SECRET_KEY:
    SECRET_KEY = "test_secret"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = os.environ.get(
    "DJANGO_ALLOWED_HOSTS", "localhost,127.0.0.1,0.0.0.0"
).split(",")

# CSRF settings
CSRF_TRUSTED_ORIGINS = os.environ.get(
    "DJANGO_CSRF_TRUSTED_ORIGINS", "http://localhost:8000,http://127.0.0.1:8000"
).split(",")
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = False
CSRF_COOKIE_SAMESITE = "Lax"


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "storages",
    "app",
    "anymail",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "app.share_access_middleware.ShareAccessMiddleware",  # Share access restriction middleware
]

# Basic authentication settings (controllable via environment variables)
BASIC_AUTH_ENABLED = os.environ.get("BASIC_AUTH_ENABLED", "TRUE").upper() == "TRUE"
BASIC_AUTH_USERNAME = os.environ.get("BASIC_AUTH_USERNAME", "admin")
BASIC_AUTH_PASSWORD = os.environ.get("BASIC_AUTH_PASSWORD", "password")

# Signup availability (controllable via environment variables)
SIGNUP_ENABLED = os.environ.get("SIGNUP_ENABLED", "TRUE").upper() == "TRUE"

# Insert middleware only when Basic authentication is enabled
if BASIC_AUTH_ENABLED:
    MIDDLEWARE.insert(0, "app.middleware.BasicAuthMiddleware")

ROOT_URLCONF = "videoq.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "app.context_processors.feature_flags",
            ],
        },
    },
]

WSGI_APPLICATION = "videoq.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB", "videoq"),
        "USER": os.environ.get("POSTGRES_USER", "videoq"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": os.environ.get("POSTGRES_HOST", "localhost"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    }
}

# Test DB: Use SQLite if explicitly specified via environment variable
if os.environ.get("DJANGO_TEST", "") == "1":
    DATABASES = {
        "default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Development/production environment switch
USE_S3 = os.environ.get("USE_S3", "FALSE") == "TRUE"

# Always set STATIC_ROOT (required for collectstatic command)
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

if USE_S3:
    # AWS S3 basic settings
    AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    AWS_S3_REGION_NAME = "ap-northeast-1"
    # Enable presigned URLs (default True)
    AWS_QUERYSTRING_AUTH = True
    # Presigned URL expiration (seconds, default 3600)
    AWS_QUERYSTRING_EXPIRE = 3600
    # All-region compatible signature version
    AWS_S3_SIGNATURE_VERSION = "s3v4"

    # Configure storage using Django 4.2+ method
    STORAGES = {
        "staticfiles": {  # Static file storage
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": {
                "bucket_name": AWS_STORAGE_BUCKET_NAME,
                "access_key": AWS_ACCESS_KEY_ID,
                "secret_key": AWS_SECRET_ACCESS_KEY,
                "location": "static",  # Directory in S3
                "default_acl": "private",  # Change ACL to private
                "custom_domain": False,
                "querystring_auth": True,  # Enable presigned URLs
                "querystring_expire": 3600,  # Override URL expiration
                "object_parameters": {"CacheControl": "max-age=86400"},
            },
        },
        "default": {  # Media file storage
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": {
                "bucket_name": AWS_STORAGE_BUCKET_NAME,
                "access_key": AWS_ACCESS_KEY_ID,
                "secret_key": AWS_SECRET_ACCESS_KEY,
                "location": "media",  # Directory in S3
                "default_acl": "private",  # Change ACL to private
                "file_overwrite": False,
                "custom_domain": False,
                "querystring_auth": True,  # Enable presigned URLs
                "querystring_expire": 3600,  # Override URL expiration
            },
        },
    }
else:
    # Local development settings
    STATIC_URL = "/static/"
    STATIC_ROOT = os.path.join(BASE_DIR, "static")
    MEDIA_URL = "/media/"
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# Default video count limit per user (overridable via environment variable)
DEFAULT_MAX_VIDEOS_PER_USER = int(os.environ.get("DEFAULT_MAX_VIDEOS_PER_USER", "100"))

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email settings (for development)
USE_MAILGUN = os.environ.get("USE_MAILGUN", "FALSE") == "TRUE"

if USE_MAILGUN:
    EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"
    mailgun_sender_domain = os.environ.get("MAILGUN_SENDER_DOMAIN")
    ANYMAIL = {
        "MAILGUN_API_KEY": os.environ.get("MAILGUN_API_KEY"),
        "MAILGUN_SENDER_DOMAIN": mailgun_sender_domain,
    }
    DEFAULT_FROM_EMAIL = os.environ.get(
        "DEFAULT_FROM_EMAIL", f"VideoQ <noreply@{mailgun_sender_domain}>"
    )
else:
    # Local development: output email content to terminal
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    DEFAULT_FROM_EMAIL = os.environ.get(
        "DEFAULT_FROM_EMAIL", "VideoQ <noreply@localhost>"
    )

FRONTEND_URL = os.environ.get("FRONTEND_URL")

# Auth settings
LOGIN_URL = "app:login"
LOGIN_REDIRECT_URL = "app:home"
AUTH_USER_MODEL = "app.User"

# Security settings
# HTTPS settings (set to True in production)
SECURE_SSL_REDIRECT = os.environ.get("SECURE_SSL_REDIRECT", "FALSE").upper() == "TRUE"
SECURE_HSTS_SECONDS = int(os.environ.get("SECURE_HSTS_SECONDS", "0"))
SECURE_HSTS_INCLUDE_SUBDOMAINS = (
    os.environ.get("SECURE_HSTS_INCLUDE_SUBDOMAINS", "FALSE").upper() == "TRUE"
)
SECURE_HSTS_PRELOAD = os.environ.get("SECURE_HSTS_PRELOAD", "FALSE").upper() == "TRUE"

# Security headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

# Session security
SESSION_COOKIE_SECURE = (
    os.environ.get("SESSION_COOKIE_SECURE", "FALSE").upper() == "TRUE"
)
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "Lax"
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = int(os.environ.get("SESSION_COOKIE_AGE", "1209600"))  # 2 weeks

# CSRF security
CSRF_COOKIE_SECURE = os.environ.get("CSRF_COOKIE_SECURE", "FALSE").upper() == "TRUE"
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = "Lax"
CSRF_USE_SESSIONS = False

# HTTPS detection via reverse proxy
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Password settings
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 8,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# File upload security
FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # 2.5MB
FILE_UPLOAD_TEMP_DIR = None
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# Video upload limit settings
VIDEO_UPLOAD_MAX_SIZE_MB = int(
    os.environ.get("VIDEO_UPLOAD_MAX_SIZE_MB", "100")
)  # Default 100MB

# Filename encoding settings
FILE_UPLOAD_HANDLERS = [
    "django.core.files.uploadhandler.MemoryFileUploadHandler",
    "django.core.files.uploadhandler.TemporaryFileUploadHandler",
]

# Redis settings
REDIS_URL = os.environ.get("REDIS_URL", "redis://redis:6379/0")

# Celery Configuration Options
# Disable Celery in test environment
if os.environ.get("DJANGO_TEST", "") != "1":
    CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://redis:6379/1")
    CELERY_RESULT_BACKEND = os.environ.get(
        "CELERY_RESULT_BACKEND", "redis://redis:6379/2"
    )
    CELERY_ACCEPT_CONTENT = ["json"]
    CELERY_TASK_SERIALIZER = "json"
    CELERY_RESULT_SERIALIZER = "json"
else:
    # Test environment: Use in-memory broker
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True

# Shared URL concurrent access limit settings
SHARE_ACCOUNT_MAX_CONCURRENT_USERS = int(
    os.environ.get("SHARE_ACCOUNT_MAX_CONCURRENT_USERS", "30")
)
SHARE_SESSION_TIMEOUT_MINUTES = int(
    os.environ.get("SHARE_SESSION_TIMEOUT_MINUTES", "10")
)

# Log settings (stdout only)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "json": {
            "format": '{"level": "%(levelname)s", "time": "%(asctime)s", "module": "%(module)s", "message": "%(message)s"}',
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "json",
        },
    },
    "loggers": {
        "app": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "app.tasks": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
}
